-------------------------------------------------------------------------OpenCV for Beginners - Full documentation----------------------------------------------------------------------------




































                                                                          17. MORPHOLOGICAL TRANSFORMATION :
1. Morphological transformation are basically performed on binary images.
2. Morphological transformations are simple operations based on the shape of an image.
3. These operations are fundamental in image processing and are useful for tasks like Noise reduction, object extraction, and boundary detection.

KERNEL : A kernel tell you how to change the value of any given pixel by combining it with different amount of neighouring pixels

Here are the basic morphological operations and how to implement them using OpenCV:
 A) Erosion:
                          Erosion erodes away the boundaries of the foreground object (usually white).
                          In erosion, it helps shrink the boundaries of white regions (foreground).
                          It slides a kernel (a small matrix) over the image and sets a pixel to 1 only if all the pixels under the kernel are 1.
                          Useful for removing small white noises and detaching connected objects.
                          Example:
                                    img = cv2.imread('j.png', cv2.IMREAD_GRAYSCALE) # READ THE IMGAGE IN GRAY SCALE OR YOU CAN SIMPLY PUT THE FLAG ==0
                                    kernel = np.ones((5, 5), np.uint8) 
                                    erosion = cv2.erode(img, kernel, iterations=1) 

B) Dilation:
                          Dilation is the opposite of erosion.
                          In dilation, it expands the white regions.
                          A pixel becomes 1 if at least one pixel under the kernel is 1.
                          Increases the white region in the image or the size of the foreground object.
                          Useful for noise removal and joining broken parts of an object.
                          Example: 
                                    'kernel = np.ones((5, 5), np.uint8) 
                                    'dilation = cv2.dilate(img, kernel, iterations=1)


C) Morphological Opening: Opening is a sequence of two operations: erosion followed by dilation.
                          It helps remove small noise or unwanted structures while preserving the overall shape and size of larger objects.
                          Commonly used for noise reduction and object separation.
                          ex: 
                              opening = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernel)


D) Morphological Closing:
                        Closing is a sequence of two operations: dilation followed by erosion. 
                        It helps close small gaps or holes in the foreground object while preserving its overall shape.
                        Commonly used for filling gaps, joining broken parts, and smoothing object boundaries.
                        The cv2.morphologyEx() function applies the closing operation.
                        ex: 
                              closing = cv2.morphologyEx(mask , cv2.MORPH_CLOSE, kernel)


E) Morphological Gradient: 
                      The morphological gradient highlights the boundaries of objects in an image.
                      It is the difference between the dilated version and the eroded version of the input image.
                      Useful for edge detection and feature extraction.
                      ex : 
                             mgradient = cv2.morphologyEx(mask , cv2.MORPH_GRADIENT, kernel)


F) Top-Hat Transformation: 
                      The top-hat transformation highlights small, bright structures (details) in an image that are smaller than the structuring element (kernel).
                      It is the difference between the original image and the opening of the image.
                      Enhances fine details.
                      Emphasizes small bright regions.
                      Detecting small objects or subtle features.
                      Background subtraction.
                      ex: 
                          that = cv2.morphologyEx(mask , cv2.MORPH_TOPHAT, kernel)

==========================================================================================================================================================================================                                                                             
                                                                  18. Smoothing Images | Blurring Images OpenCV

To acheive smoothing and blurring we can use diverse linear filter, because linear filter easy to acheive and also fast
There are various linear filters : 1. Homogenous filter
                                   2. Guassian filter
                                   3. Median filter
                                   4. Bilateral filter
a) Homogenous Filter : 





                          




